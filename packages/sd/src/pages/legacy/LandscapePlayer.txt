import React, { useState, useRef, useEffect } from 'react';
import { useHistory } from 'react-router-dom';
// import { useWindowSize } from 'react-use';
import classnames from 'classnames';

import makeStyles from '@mui/styles/makeStyles';
import ArrowForward from '@mui/icons-material/ArrowForward';
import IconButton from '@mui/material/IconButton';
import Eject from '@mui/icons-material/Eject';

// import Paper from '@mui/material/Paper';
import ListSubheader from '@mui/material/ListSubheader';
import Button from '@mui/material/Button';
import AppBar from '@mui/material/AppBar';
import Toolbar from '@mui/material/Toolbar';
import MenuIcon from '@mui/icons-material/FormatListBulleted';
import SwipeableDrawer from '@mui/material/SwipeableDrawer';
import CurrentSongList from 'subfirelib/browsers/songs/CurrentSongList';
import { useImageColorTheme, useImageFit } from 'subfirelib/hooks';

import { Th6, Tb1, Tb2, Tc, Gc, Gi, Gci, B } from 'subfirelib/ui/TG';
/* eslint react/prop-types: 0 */

const useStyles = makeStyles(theme => ({
  landscapePlayer: {
    position: 'relative',
    top: 72,
    height: 'calc(100% - 72px)'
  },
  appbar: {
    maxHeight: 72
  },
  flex: {
    flex: 1,
    color: 'inherit'
  },
  grid: {
    flex: '0 1 auto'
  },
  title: {
    color: 'inherit'
  },
  list: {
    position: 'relative',
    overflow: 'auto'
  },
  closeButton: {
    backgroundColor: '#000000'
  },
  songListItem: {
    maxWidth: 352
  },
  selectedSongListItem: {
    maxWidth: 352,
    fontStyle: 'italic',
    marginLeft: 10
  },
  secondaryActionButtonsCentered: {
    width: '100%',
    display: 'flex',
    justifyContent: 'space-evenly',
    background: theme.palette.secondary.main,
    color: theme.palette.secondary.contrastText
  },
  listHeader: {
    background: theme.palette.secondary.main,
    color: theme.palette.secondary.contrastText
  },
  actionButtons: {
    // position: 'absolute',
    // width: '80%',
    // left: '10%',
    // bottom: theme.spacing(5),
    display: 'flex',
    justifyContent: 'space-evenly',
    flex: '0 0 auto'
  },
  left: {
    display: 'block'
  },
  right: {
    display: 'block',
    textAlign: 'right'
  },
  songList: {
    maxWidth: '40vw',
    padding: 0
  }
}));

export function LandscapePlayer(props) {
  const [playlistOpen, setPlaylistOpen] = useState(false); // eslint-disable-line
  // const windowSize = useWindowSize();
  const imageRef = useRef();
  const [divRef] = useImageFit(imageRef);
  const { setImageTag } = useImageColorTheme();
  const currentImageTag = imageRef.current;

  const { components: c, currentPlaying: cp, queue: q } = props;
  const { CastButton } = c;
  const { paused } = c.state;
  const history = useHistory();
  const classes = useStyles();
  const goBack = () => history.goBack();
  const handleDrawer = () => setPlaylistOpen(true);
  const handleClose = () => setPlaylistOpen(false);

  useEffect(() => {
    if (paused) {
      document.querySelector('.page-bg').classList.add('faded');
    } else {
      document.querySelector('.page-bg').classList.remove('faded');
    }
    return () => {
      const pagebg = document.querySelector('.page-bg');
      if (pagebg) pagebg.classList.remove('faded');
    };
  }, [paused]);

  /*           <CastSubsonic {...subProps}>
              <ChromecastButton {...subProps} />
            </CastSubsonic>
            <RemoteReceiverToggleButton {...subProps} />
  */

  // const coverSize = (windowSize.width - 32) / 3;

  const imageLoadHandler = evt => {
    if (setImageTag) {
      setImageTag({ tag: currentImageTag });
    }
  };

  return <>
    <AppBar className={classes.appbar}>
      <Toolbar>
        <IconButton
          className={classes.menuButton}
          color="inherit"
          onClick={goBack}
          size="large">
          <Eject />
        </IconButton>
        <Th6 className={classes.flex}>
          <span id="title-span" className={classes.title}>
            {q.queueName || 'SubFire Mobile 3'}
          </span>
        </Th6>
        <CastButton/>
        {c.volumeButtonBelow}
        <IconButton
          className={classes.menuButton}
          color="inherit"
          onClick={handleDrawer}
          size="large">
          <MenuIcon />
        </IconButton>
      </Toolbar>
    </AppBar>
    <div className={classes.landscapePlayer}>
      <Gc style={{ height: '100%' }}>
        <Gi xs={6} style={{ maxHeight: '100%', padding: 15 }}>
          <div
            ref={divRef}
            style={{
              width: '100%',
              height: '100%',
              backgroundColor: 'transparent',
              display: 'flex',
              justifyContent: 'center',
              alignItems: 'start'
            }}
          >
            {c.artwork(0, imageRef, imageLoadHandler, 'image-shadow')}
          </div>
        </Gi>
        <Gci xs={6} direction="column" justify="space-between" alignItems="stretch" style={{ padding: 15 }}>
          <Gi>
            <Tb1>{cp.title}</Tb1>
            <B flexDirection="row">
              <Tb2>{cp.artist}</Tb2> <div style={{ flex: '1 0 auto' }}></div>
              <Tc className={classnames(classes.right, classes.caption)}>
                ({q.idx + 1}/ {q.queue.length})
              </Tc>
            </B>
            <B flexDirection="row" alignItems="center">
              <Tb2>{cp.album}</Tb2> <div style={{ flex: '1 0 auto' }}></div>
              <Tc className={classnames(classes.right, classes.caption)}>({cp.year})</Tc>
            </B>
          </Gi>
          <Gi>
            {c.slider}
            <B flexDirection="row" alignItems="center">
              <Tc className={classnames(classes.left, classes.caption)}>{c.currentTime}</Tc>
              <div style={{ flex: '1 0 auto' }}></div>
              <Tc className={classnames(classes.right, classes.caption)}>{c.duration}</Tc>
            </B>
          </Gi>
          <Gi className={classes.actionButtons}>
            {c.prevButton}
            {c.back10Button}
            {c.playPauseButton}
            {c.skip30Button}
            {c.nextButton}
          </Gi>
        </Gci>
      </Gc>
    </div>
    <SwipeableDrawer open={Boolean(playlistOpen)} onClose={handleClose} onOpen={handleDrawer} anchor="right">
      <CurrentSongList className={classes.songList} onSongClick={handleClose}>
        <ListSubheader component="div" className={classes.listHeader}>
          <B flexDirection="row" alignItems="center">
            {c.bookmarkButton}
            {c.playQueueButton}
            {c.skipAlbumButton}
            {c.shuffleQueueButton}
            <div style={{ flex: '1 0 auto' }}></div>
            <Button onClick={handleClose}>
              Close
              <ArrowForward />
            </Button>
          </B>
        </ListSubheader>
      </CurrentSongList>
    </SwipeableDrawer>
  </>;
}

export default LandscapePlayer;
